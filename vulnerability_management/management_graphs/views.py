from django.shortcuts import render
from django.contrib.auth.models import User
from django.views.generic import View,TemplateView
from django.contrib.auth import authenticate,login,logout
from django.http import HttpResponse,HttpResponseRedirect,JsonResponse
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from management_graphs.models import  Sql_injection, Linux_vul, Windows_vul, Code_injection ,Tickets, vulnerability_type
import json
from django.core import serializers

# Create your views here.

class LogoutView(View):
    def get(self, request):
        logout(request)
        return HttpResponseRedirect(reverse('management_graphs:login'))

class LoginView(TemplateView):

    template_name = 'login.html'


    def post(self, request):
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(username=username, password=password)

        if user is not None:
            if user.is_active:
                login(request, user)

                return HttpResponseRedirect(reverse('management_graphs:welcome'))
            else:
                return HttpResponse("Inactive user.")
        else:
            return render(request , 'login_faild.html')

# @method_decorator(csrf_exempt, name='dispatch')
# class welcome_view(TemplateView):
#     template_name = 'welcome_page.html'


class welcome_view(View):

    def get(self, request, *args, **kwargs):
        # context = {'collapseOne': True }
        return render(request, "welcome_page.html")


# @method_decorator(csrf_exempt, name='dispatch')
class Graph_page(View):

    def get(self, request, *args, **kwargs):
        return render(request, "Graphs_page.html")

class Json_data(View):

    def get(self, request):
        SQL_data = Sql_injection.objects.filter().values("vulnerability","time")
        SQL_data_list=[]
        for i in SQL_data:
            SQL_data_list.append([i['time'].timestamp()*1000,i['vulnerability']])
        return JsonResponse(SQL_data_list, safe=False)

class Json_data_types(View):

    def get(self, request):
        data = vulnerability_type.objects.filter().values('name','procent')
        data_list=[]
        for i in data:
            data_list.append([i['name'],i['procent']])
        return JsonResponse(list(data_list), safe=False)

class Json_data_All(View):

    def get(self, request):
        data_Sql_injection = Sql_injection.objects.filter().values("vulnerability","time")
        data_Linux_vul = Linux_vul.objects.filter().values("vulnerability","time")
        data_Windows_vull = Windows_vul.objects.filter().values("vulnerability","time")
        data_Code_injection = Code_injection.objects.filter().values("vulnerability","time")



        data_Sql_injection_list=[]
        for i in data_Sql_injection:
            data_Sql_injection_list.append([i['time'].timestamp()*1000,i['vulnerability']])
        data_Linux_vul_list=[]
        for i in data_Linux_vul:
            data_Linux_vul_list.append([i['time'].timestamp()*1000,i['vulnerability']])
        data_Windows_vull_list=[]
        for i in data_Windows_vull:
            data_Windows_vull_list.append([i['time'].timestamp()*1000,i['vulnerability']])
        data_Code_injection_list=[]
        for i in data_Code_injection:
            data_Code_injection_list.append([i['time'].timestamp()*1000,i['vulnerability']])


        data = {'data_Sql_injection':data_Sql_injection_list,'data_Linux_vul':data_Linux_vul_list,'data_Windows_vull':data_Windows_vull_list,'data_Code_injection':data_Code_injection_list}

        return JsonResponse(data, safe=False)

class Json_data_Tickets(View):

    def get(self, request):
        data_unresolved = Tickets.objects.filter(status="unresolved").values().count()
        data_resolved = Tickets.objects.filter(status="resolved").values().count()
        data_recieved = Tickets.objects.filter(status="recived").values().count()
        # print(data_recieved)
        # data_list=[]
        # for i in data:
        #     data_list.append([i['name'],i['procent']])
        tickets = [["recived",data_recieved],["resolved",data_resolved],["unresolved",data_unresolved] ]
        return JsonResponse(tickets, safe=False)
